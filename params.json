{"name":"AMNL\\Mollie","tagline":"PHP 5.3+ library for communicating with Mollie (PSP)","body":"The goal of this PHP 5.3+ library is to simplify the implementation of the payment methods offered by [Mollie B.V.](http://www.mollie.nl)\r\n\r\n# Installation\r\nYou can easily install this library using Composer by adding it to your composer.json or by running this command from your command-line:\r\n```bash\r\nphp composer.phar require ruudk/mollie-bundle\r\n```\r\nIf you will be using Symfony 2, you can choose to install the bundle created by @ruudk, which can be found [here](https://github.com/ruudk/MollieBundle).\r\nAnd finally, if you aren't using composer or Symfony 2, you can just download the code as an archive.\r\n\r\n# Usage\r\nEvery client implements the `AMNL\\Mollie\\ProviderGateway` interface. This is done to make it easier to implement the other payment methods when you've already implemented one. This also means that every client has a **checkPayment** and a **preparePayment** method.\r\n\r\n## iDEAL\r\nTo handle iDEAL payments we'll need an instance of `AMNL\\Mollie\\IDeal\\IDealGateway`. The constructor has the following parameters:\r\n* `$partner_id` - Your Mollie Partner ID (account number)\r\n* `$profile_key` - Profile key *[optional]*\r\n* `$testmode` - Set to false to disable the test mode *[optional - true by default]*\r\n* `$base_url` - Sets the base URL used for API calls *[optional - defaults to null, which means the default url will be used]*\r\n* `$client` - Instance of the Buzz client that should be used to issue requests. Should be an instance of *\\Buzz\\Client\\ClientInterface*.\r\n\r\nSo, let's say your Partner ID is `123456`, then you would need to following code to get started (assuming you have an autoloader mechanism in place).\r\n```php\r\n<?php\r\n$gateway = new \\AMNL\\Mollie\\IDeal\\IDealGateway(123456);\r\n```\r\n\r\n### 0. Get list of banks\r\nBefore you can prepare a payment, we first need to know which bank the customer is going to use. You can get a list of banks by calling the `getBankList` method on the gateway instance, which gives you an array of `\\AMNL\\Mollie\\IDeal\\Bank`. You'll need a Bank-object or a bank ID when preparing a payment.\r\n```php\r\n<?php\r\n$banks = $gateway->getBankList();\r\n```\r\n\r\n### 1. Prepare payment\r\nTo prepare a payment and get the URL you should redirect your customer to, you can call either the `preparePayment` or the `prepareIDealPayment` method on the gateway instance. The latter will call the former internally.\r\n\r\nThe method signature of *preparePayment* is pretty much compatible across all the different payment gateways included in this library. *preparePayment* accepts the following parameters:\r\n* `$amount` - Amount that must be paid, in **Euro cents**\r\n* `$report_url` - URL that will be called to inform your application of a status update\r\n* `$return_url` - URL the customer will be send to after the payment process is done (even if it was unsuccessful!)\r\n* `$description` - Description which will be visible to the customer\r\n* `$options` - Array of additional options needed for a specific gateway. In case of the *IDealGateway* this should contain a key *bank* which has a Bank instance or a bank ID (int / string) as its value.\r\n\r\n** WORK IN PROGRESS --- TO BE CONTINUED **","google":"UA-13135527-17","note":"Don't delete this file! It's used internally to help with page regeneration."}